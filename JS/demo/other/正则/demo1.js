/* 
正则表达式
regular expression：RegExp
用来处理字符串的规则
*只能处理字符串
*他是一个规则：可以呀正字符串是否符合某个规则(test)，也可以把字符串中符合规则的内容捕获到(exec/match...)
*/
let str = 'good good study,day day up!';
// 学正则就是用来指定规则（是否包含数字）
let reg = /\d+/;
reg.test(str); //false

str = '2021-11-23';
reg.exec(str); //['2021', index: 0, input: '2021-11-23', groups: undefined]
// input存储原始字符串你
// 编写正则表达式
// 创建方式有两种
// 字面量方式(两个斜杠之间抱起来的，都是用来描述规则的元字符)
let reg1 = /\d+/;
// 构造函数模式创建(两个参数：元字符字符串，修饰符字符串)
let reg2 = new RegExp('\\d+');
// 正则表达式由两部分组成：元字符、修饰符
/* 
常用的元字符
1.量词元字符：设置出现的次数
'*' 代表零到多次
'+' 一到多次
'?' 零次或者一次
{n} 出现n次
{n,} 出现n到多次
{n,m} 出现n到m次
2.特殊元字符：单个或者组合再一起代表特殊的含义
'\' 转义字符（普通->特殊->普通）
'.' 除\n（换行符）意外的任意字符
'^' 以哪一个元字符作为开始
'$' 以哪一个元字符作为结束
'\n' 换行符
'\d' 0~9之间的一个数字
'\D' 非0~9之间的一个数字（大写和小写的意思是相反的）
'\w' 数字、字母、下划线中的任意一个字符
'\W' 非数字、非字母、非下划线中的任意一个字符
'\s' 一个空白字符（包含空格、制表符、换页符等）
'\t' 一个制表符（一个TAB键：四个空格）
'\b' 匹配一个单词的边界
'x|y' x或者y中的一个字符
'[xyz]' x或者y或者z中的一个字符 例：[asdas,d12312]中的一个，逗号也算是其中一个选择
'[^xy]' 除了x/y以外的任意字符
'[a-z]' 指定a-z这个范围中的任意字符 [0-9a-zA-Z_]===\w 0-9或者a-z或者A-Z或者_，四择一个 
'[^a-z]' 上一个的取反'非' === \W
() 正则中的分组符号
(?:) 只匹配不捕获
(?=) 正向预查
(?!) 反向预查

3.普通元字符：代表本身含义
'/zhufeng/' 此正则匹配的就是"zhufeng"

正则表达式常用的修饰符：img
i ignoreCase 忽略单词大小写匹配
m multiline 可以进行多行匹配
g global 全局匹配

ep：
/A/.test('lalala') => false
/A/i.test('lalala') => true 因为忽略大小写
*/
