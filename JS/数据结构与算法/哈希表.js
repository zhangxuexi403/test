/* 
    ?哈希表(很高效的查找的数据结构)
    哈希表是一个通过哈希函数来计算数据存储位置的数据结构，通常支持如下操作：
    inset(key, value)：插入键值对(key, value)
    get(key)：如果存在键为key的键值对则返回其value，否则返回空值
    delete(key)：删除键为key的键值对
    ?直接寻址表(key是2就放在2位置上，5就放在5位置上，34位都是浪费的空间，查找是O(1)的，但是空间浪费巨大)
    当关键字的全域U比较小时，直接寻址是一种简单而有效的方法。
    ?直接寻址技术缺点：
    当域U很大时，需要消耗大量内存，很不实际
    若域U很大而实际出现key很少，则大量空间被浪费
    无法处理关键字而不是数字情况
    ?哈希
    直接寻址表：key为k的元素放到k位置上
    改进直接寻址表：哈希(Hashing)
        构建大小为。m的寻址表T
        key为k的元素放在h(k)位置上
        h(k)是一个函数，将其域U映射到表T[0,1,...,m-1]
        例：0-100w输入，经h(k)函数，输出只可能为 1~m-1（哈希函数规定了输出范围）
    ?哈希表
    哈希表(Hash Table，又称为散列表)，是一种线性表的存储结构。哈希表由一个直接寻址表和一个哈希函数组成。
    哈希函数h(k)将元素关键字k作为自变量，返回元素的存储下标。
    假设有一个长度为7的哈希表，哈希函数h(k)=k%7。元素集合{14,22,3,5}的存储方式如下入
    14  22       3       5 
    i:0 i:1 i:2 i:3 i:4 i:5 i:6
    ?哈希冲突
    由于哈希表的大小是优先的，而要存储的值的总数量是无限的，因此对于任何哈希函数，都会出现两个不同的元素映射到同一个位置上的情况，这种情况叫做哈希冲突。
    ?解决哈希冲突————开放寻址法(哈希表满的时候就失效了)
    开放寻址发：如果哈希函数返回的位置已经有值，则可以向后探查新的位置来存储这个值
        线性查找：如果这个位置i被占用，则探查i+1,i+2,......
        二次探查：如果位置i被占用，则探查i+1^2,i-1^2,i+2^2,i-2^2,......
        二度哈希：有n个哈希函数，当使用第1个哈希函数h1发生冲突时，则尝试使用费h2,h3,......
    插入的探查方式和查找的探查方式一致，直到找到空的位置
    线性探查的装载因子过大，效率不高。
    ?解决哈希冲突————拉链法
    拉链法：哈希表每个位置都链接一个链表，当冲突发生时，冲突的元素将被加到该位置链表的最后。
    ?复杂度
    节点足够平均分布到哈希表的位置上，整个表中有N个数，表长度为M，一个位置的链表只有N/M个元素，最多只要查N/M次
    ?哈希表————常见哈希函数
    除法哈希法：h(k) = k % m
    乘法哈希法：h(k) = floor(m*(A*key%1))，m是大小，A是一个值
    全域哈希法：h_a,b(k) = ((a*key+b)%p)%m  a,b=1,2,...,p-1
    ?哈希表的应用————集合与字典
    字典与集合都是通过哈希表来实现的。
        a={'name':'Alex','age':'18','gender':'Max'}
    使用哈希表存储字典，通过哈希函数将字典的键值映射为下标。
    假设h('name')=3,h('age')=1,h('gender')=4，则哈希表存储为[None,18,None,'Alex','Man']
    若发生哈希冲突，则通过拉链法或开放寻址法解决
    ?哈希表的应用————md5算法
    MD5(Message-Digest Algorlthm 5)曾经是密码学中常用的哈希函数，可以把任意长度的数据映射为128位的哈希值，其曾经包含如下特征：
    1.同样的消息，其MD5值必定相同
    2.可以快速计算出任意给定消息的MD5值
    3.除非暴力的枚举所有可能的消息，否则不可能从哈希函数值反推出消息本身
    4.两条消息之间即使只有微小的差别，其对应的MD5值也应该是完全不同、完全不相关的
    5.不能在有意义的时间内人工的构造两个不同的消息，使其具有相同的MD5值。
    两个文件哈希值一样，只能说明这莱昂个文件很大概率是同一个文件
    ?哈希表的应用————md5
    应用举例：文件的哈希值
    算出文件的哈希值，若两个文件的哈希值相同，则认为两个文件是相同的。因此：
    1.用户可以利用它来验证下载的文件是否完整
    2.云服务存储商可以利用它来判断用户要上传的文件是否已经在于服务器上，从而实现妙传功能，同时避免存储过多相同的文件副本。
    ?哈希表的应用————SHA2算法
    历史上MD5和SHA-1曾经是使用最为广泛的cryptographic hash function，但是随着密码学的发展，这两个哈希函数的安全性相机收到了各种挑战。
    因此现在安全性比较重要的场合推荐使用SHA-2等新的更安全的哈希函数。
    SHA-2包含了一系列的哈希函数：SHA-224，SHA-256，SHA-384，SHA-512，SHA-512/224，SHA-512/256，其对应的哈希长度分别为224，256，384or512位。
    SHA-2具有和MD5类似的性质
    ?哈希表的应用————SHA2算法
    应用举例：
    例如，在比特币系统中，所有参与者需要共同解决如下问题：对于一个给定的字符串U，给定的目标哈希值H，需要计算出一个字符串V，
    使得U+V的哈希值与H的差小于一个给定值D。此时，只能通过暴力枚举V来进行猜测。
    首先计算出结果的人可以获取一定奖金。而某人首先计算成功的概率与其拥有的计算量成正比，所以其获得的奖金的期望值与其拥有的计算量成正比。
*/
