// 设计模式-简介
// 本质：设计模式的根本是减少项目变化所导致的影响
// 概念：是为了解决在开发中可能遇到的需求(相似)，而提出的一套解决方式
// 前端常见的设计模式：工厂，单例，命令，模板，策略，观察者，命名空间
// 目的：高内聚，低耦合，提高宠用性，减少代码冗余，扩展性，稳定性

/* other */
/* 备忘录模式 */
/* 1.应用场景 */
// 函数结果缓存
// 举例：一般一个函数，给定相同的参数，都会得到一个固定的结果。那么假设这个函数特别耗费性能。而我们需要计算10此相同参数的结果，就会非常耗费性能
// 解决方案：事先把计算好的结果都存储起来。当下次再计算时，先到结果缓存中查看，有就直接返回，没有再计算，再缓存。
/* 2.步骤 */
// 1.提供一个全局的对象(缓存对象)。key-value
// 2.当我们传递参数需要进行计算(逻辑)的时候，先检查缓存对象中是否有对应的结果
// 3.如果有缓存数据，那么就直接使用(可以节约时间，提高效率)
// 4.如果没有缓存数据，那么这时候再执行计算操作，处理得到结果之后，把这个数据保存起来

/* 命名空间模式 */
// 写法:就是把所有的东西写在一个对象里面
// 命名：命名空间的名称一般是项目的名称或者是简写，要求所有的字符都大写
// 为什么使用命名空间？为了防止全局变量的冲突
